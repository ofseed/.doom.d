#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Doom Emacs
Place your private configuration here! Remember, you do not need to run
=doom sync= after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+BEGIN_SRC elisp
(setq user-full-name "Yi Ming"
     user-mail-address "ofseed@foxmail.com")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom:

- ~doom-font~ -- the primary font to use
- ~doom-variable-pitch-font~ -- a non-monospace font (where applicable)
- ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.
- ~doom-unicode-font~ -- for unicode glyphs
- ~doom-serif-font~ -- for the ~fixed-pitch-serif~ face

See =C-h v doom-font= for documentation and more examples of what they
accept. For example:

setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use =M-x describe-font= to look them
up, =M-x eval-region= to execute elisp code, and =M-x doom/reload-font= to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "LXGW WenKai Mono" :size 18))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:
#+BEGIN_SRC elisp
(setq doom-theme 'doom-horizon)
#+END_SRC

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.
#+BEGIN_SRC elisp
(setq display-line-numbers-type nil)
#+END_SRC

If you use ~org~ and don't want your org files in the default location below,
change ~org-directory~. It must be set before org loads!
#+BEGIN_SRC elisp
(setq org-directory "~/Documents/org/")
#+END_SRC


* Custom Packages
Whenever you reconfigure a package, make sure to wrap your config in an
~after!~ block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like ~org-directory~)
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see =C-h v VARIABLE= to look up their documentation).
  - Setting doom variables (which start with =doom-= or =+=).

Here are some additional functions/macros that will help you configure Doom.

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press =K= (non-evil users must press =C-c c k=).
This will open documentation for it, including demos of how they are used.
Alternatively, use =C-h o= to look up a symbol (functions, variables, faces,
etc).

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.

Adjust emacs window size. Note that ~initial-frame-alist~ has no effect on
the window size of emacsclient.
#+BEGIN_SRC elisp
(pushnew! default-frame-alist '(width . 100) '(height . 40))
#+END_SRC

Evil mode configuration, use =C-l= to clear search highlighting.
#+BEGIN_SRC elisp
(use-package! evil
  :config
  (evil-global-set-key 'normal (kbd "C-l") 'evil-ex-nohighlight))
#+END_SRC

Emacs-Rime is used as a client of rime to provide the Chinese input method
inside Emacs. ~rime-lib-finalize~ is required to finalize librime, otherwise,
there will a segment fault be generated. Wrap it with a custom function,
since it will not be defined if emacs-rime is not loaded.
#+BEGIN_SRC elisp
(use-package! rime
  :init (setq rime-show-candidate 'posframe)
  :custom (default-input-method "rime")
  :config
  (defun ym/rime-finalize()
    (when (fboundp 'rime-lib-finalize)
     (rime-lib-finalize)))
  :hook (kill-emacs . ym/rime-finalize))
#+END_SRC

A websocket implementation in lisp, for emacs. Load websocket after org-roam
is loaded. This is a recommend configuration of org-roam-ui.
#+BEGIN_SRC elisp
(use-package! websocket
  :after org-roam)
#+END_SRC

Org-Roam-UI is a frontend for exploring and interacting with the Org-Roam notes.
#+BEGIN_SRC elisp
(use-package! org-roam-ui
  :after org-roam ;; or :after org
;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;; hookable mode anymore, you're advised to pick something yourself
;; you don't care about startup time, use
;;:hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+END_SRC

Telega is a client for Telegram.
#+BEGIN_SRC elisp
(use-package! telega
  :load-path "~/telega.el"
  :commands (telega)
  :defer t)
#+END_SRC
